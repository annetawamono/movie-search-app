{"version":3,"sources":["movieCard.js","searchMovies.js","App.js","serviceWorker.js","index.js"],"names":["MovieCard","props","className","key","movie","id","src","poster_path","alt","title","release_date","vote_average","overview","SearchMovies","useState","query","setQuery","setMovie","searchMovies","e","a","preventDefault","console","log","url","fetch","res","json","data","results","error","onSubmit","htmlFor","type","name","placeholder","value","onChange","target","length","filter","m","map","Main","React","Component","Home","to","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"sUAEe,SAASA,EAAUC,GAIhC,OACE,yBAAKC,UAAU,OAAOC,IAAKF,EAAMG,MAAMC,IACrC,yBAAKH,UAAU,cAAcI,IAAG,0DAAqDL,EAAMG,MAAMG,aAAeC,IAAKP,EAAMG,MAAMK,MAAQ,WACzI,yBAAKP,UAAU,iBACb,wBAAIA,UAAU,eAAeD,EAAMG,MAAMK,OACzC,2BAAG,gDAAsBR,EAAMG,MAAMM,eACrC,2BAAG,0CAAgBT,EAAMG,MAAMO,eAC/B,uBAAGT,UAAU,cAAcD,EAAMG,MAAMQ,YCVhC,SAASC,IAAe,MAKXC,mBAAS,IALE,mBAK9BC,EAL8B,KAKvBC,EALuB,OAOXF,mBAAS,IAPE,mBAO9BV,EAP8B,KAOvBa,EAPuB,KAS/BC,EAAY,uCAAG,WAAOC,GAAP,mBAAAC,EAAA,6DACnBD,EAAEE,iBACFC,QAAQC,IAAI,cAENC,EAJa,kHAIoGT,EAJpG,iDAQCU,MAAMD,GARP,cAQXE,EARW,gBASEA,EAAIC,OATN,OASXC,EATW,OAUjBX,EAASW,EAAKC,SAVG,kDAYjBP,QAAQQ,MAAR,MAZiB,0DAAH,sDAuBlB,OACE,oCACE,0BAAM5B,UAAU,OAAO6B,SAAUb,GAC/B,2BAAOc,QAAQ,QAAQ9B,UAAU,SAAjC,cACA,2BAAOA,UAAU,QAAQ+B,KAAK,OAAOC,KAAK,QAAQC,YAAY,gBAAgBC,MAAOrB,EAAOsB,SAAU,SAAClB,GAAD,OAAOH,EAASG,EAAEmB,OAAOF,UAC/H,4BAAQlC,UAAU,SAAS+B,KAAK,UAAhC,WAEF,yBAAK/B,UAAU,aACF,MAATE,GAAiBA,EAAMmC,OACvBnC,EAAMoC,QAAO,SAAAC,GAAC,OAAIA,EAAElC,eAAamC,KAAI,SAAAD,GAAC,OACtC,kBAACzC,EAAD,CAAWI,MAAOqC,OAEpB,iD,sBClBFE,E,uKAEF,OACE,yBAAKzC,UAAU,aACb,wBAAIA,UAAU,SAAd,sBACA,kBAACW,EAAD,W,GALW+B,IAAMC,WAYnBC,EAAO,kBACX,yBAAK5C,UAAU,aACb,wBAAIA,UAAU,SAAd,0BACA,kBAAC,IAAD,CAAMA,UAAU,sBAAsB6C,GAAG,WAAzC,WAIWC,EA3Cf,WACE,OACI,yBAAK9C,UAAU,aACb,kBAAC,IAAD,KACE,yBAAKA,UAAU,OACb,4BACE,wBAAIA,UAAU,aACZ,kBAAC,IAAD,CAAM6C,GAAG,KAAT,SAEF,wBAAI7C,UAAU,aACZ,kBAAC,IAAD,CAAM6C,GAAG,WAAT,aAKN,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOE,OAAO,EAAMC,KAAK,IAAIC,UAAWL,IACxC,kBAAC,IAAD,CAAOI,KAAK,UAAUC,UAAWR,QCVzBS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAtC,GACLR,QAAQQ,MAAMA,EAAMuC,c","file":"static/js/main.179f388c.chunk.js","sourcesContent":["import React from 'react';\n\nexport default function MovieCard(props){\n\n  // instead of MovieCard(props), can use MovieCard({movie}) and directly reference it\n\n  return(\n    <div className=\"card\" key={props.movie.id}>\n      <img className=\"card__image\" src={`https://image.tmdb.org/t/p/w185_and_h278_bestv2/${props.movie.poster_path}`} alt={props.movie.title + 'poster'} />\n      <div className=\"card__content\">\n        <h3 className=\"card__title\">{props.movie.title}</h3>\n        <p><small>RELEASE DATE: {props.movie.release_date}</small></p>\n        <p><small>RATING: {props.movie.vote_average}</small></p>\n        <p className=\"card__desc\">{props.movie.overview}</p>\n      </div>\n    </div>\n  );\n}\n","import React, {useState} from \"react\";\nimport MovieCard from \"./movieCard\";\n\nexport default function SearchMovies() {\n\n  // states - input query, movies\n  // using useState which is a hook and lets you use states in a class way but in a function\n\n  const [query, setQuery] = useState('');\n  // movies will be an array so we pass it an empty array\n  const [movie, setMovie] = useState([]);\n\n  const searchMovies = async (e) => {\n    e.preventDefault();\n    console.log(\"submitting\");\n\n    const url = `https://api.themoviedb.org/3/search/movie?api_key=9563fbf0d02687cd2dc2c62ca0e00e59&language=en-US&query=${query}&page=1&include_adult=false`;\n\n    // try the fetch request and output errors to console\n    try {\n      const res = await fetch(url);\n      const data = await res.json();\n      setMovie(data.results);\n    }catch(err) {\n      console.error(err);\n    }\n\n  }\n\n  // empty tag bc jsx only allows one root tag on return\n  // form calls function searchMovies which prevents default\n  // map needs to give a unique key for each thing, so we use movie id\n  // use filter to only show movies with posters\n  // separate the movie card into its own component\n\n  return (\n    <>\n      <form className=\"form\" onSubmit={searchMovies}>\n        <label htmlFor=\"query\" className=\"label\">Movie Name</label>\n        <input className=\"input\" type=\"text\" name=\"query\" placeholder=\"Search movies\" value={query} onChange={(e) => setQuery(e.target.value)} />\n        <button className=\"button\" type=\"submit\">Search</button>\n      </form>\n      <div className=\"card-list\">\n        {(movie != null && movie.length) ?\n          movie.filter(m => m.poster_path).map(m => (\n          <MovieCard movie={m} />\n        )) :\n        <p>No results found</p>}\n      </div>\n    </>\n  );\n}\n","import React from 'react';\nimport './css/App.css';\nimport SearchMovies from \"./searchMovies\";\nimport { Link, Route, Switch, BrowserRouter } from \"react-router-dom\";\n\nfunction App() {\n  return (\n      <div className=\"container\">\n        <BrowserRouter>\n          <nav className=\"nav\">\n            <ul>\n              <li className=\"nav__link\">\n                <Link to=\"/\">Home</Link>\n              </li>\n              <li className=\"nav__link\">\n                <Link to=\"/search\">Search</Link>\n              </li>\n            </ul>\n          </nav>\n\n          <Switch>\n            <Route exact={true} path=\"/\" component={Home} />\n            <Route path=\"/search\" component={Main} />\n          </Switch>\n        </BrowserRouter>\n      </div>\n  );\n}\n\nclass Main extends React.Component {\n  render() {\n    return (\n      <div className=\"container\">\n        <h1 className=\"title\">React Movie Search</h1>\n        <SearchMovies />\n      </div>\n    );\n  }\n}\n\n// Home component\nconst Home = () => (\n  <div className=\"container\">\n    <h1 className=\"title\">React Movie Search App</h1>\n    <Link className=\"button button--home\" to=\"/search\">Start</Link>\n  </div>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}